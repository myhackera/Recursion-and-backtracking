https://leetcode.com/problems/permutations/discuss/993970/Python-4-Approaches-%3A-Visuals-%2B-Time-Complexity-Analysis
Solution 1.) 
============>>>>

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:

        def dfs(nums, path, res):
            if not nums:
                res.append(path)
            
            for i in range(len(nums)):
                dfs(nums[:i]+nums[i+1:], path+[nums[i]], res)
                
        
        res = []
        dfs(nums, [], res)
        return res
        
   
Solution 2.)
=============>>>>

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        
        res = []
        def permute(nums, l, r):
            if l == r:
                res.append(nums[:])
            else:
                for i in range(l, r):
                    nums[l], nums[i] = nums[i], nums[l]
                    permute(nums, l+1, r)
                    nums[l], nums[i] = nums[i], nums[l]
            
        permute(nums, 0, len(nums))
        return res
