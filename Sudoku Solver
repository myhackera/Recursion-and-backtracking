class Solution: 
    def solveSudoku(self, board: List[List[str]]) -> None:
        
        def isSafe(board, row, col, value):
        
            for i in range(len(board)):
                if board[i][col] == str(value):
                    return False
            for j in range(len(board)):
                if board[row][j] == str(value):
                    return False

            sr = (row//3)*3
            sc = (col//3)*3

            for i in range(sr, sr+3, 1):
                for j in range(sc, sc+3, 1):
                    if board[i][j] == str(value):
                        return False

            return True
                
        
        def helper(board, row, col):
        
            if row == len(board):
                return True

            nrow = ncol = 0

            if col == len(board)-1:
                ncol = 0
                nrow = row+1
            else:
                ncol = col+1
                nrow = row

            if board[row][col] != ".":
                if helper(board, nrow, ncol):
                    return True
            else:
                for i in range(1, 10, 1):
                    if isSafe(board, row, col, i):
                        board[row][col] = str(i)
                        if helper(board, nrow, ncol):
                            return True
                        else:
                            board[row][col] = "."
            return False
        
        helper(board, 0, 0)
        
More Efficient
--------------->>>

class Solution: 
    def solveSudoku(self, board: List[List[str]]) -> None:
        
        rows = [set() for _ in range(9)]
        cols = [set() for _ in range(9)]
        boxes = [set() for _ in range(9)]
        
        for i in range(9):
            for j in range(9):
                
                if board[i][j] != ".":
                    num = int(board[i][j])
                    rows[i].add(num)
                    cols[j].add(num)
                    box_id = i//3*3 + j//3
                    boxes[box_id].add(num)
                  
        
        def backtrack(row, col):
            nonlocal solved
            if row == 9:
                solved = True
                return 

            nrow = row + (col+1)//9
            ncol = (col+1)%9
            
            
            if board[row][col] != ".":
                backtrack(nrow, ncol)
            else:
                for val in range(1, 10):
                    box_id =  row//3*3 + col//3
                    if val not in rows[row] and val not in cols[col] and val not in boxes[box_id]:
                        rows[row].add(val)
                        cols[col].add(val)
                        boxes[box_id].add(val)
                        board[row][col] = str(val)
                        
                        backtrack(nrow, ncol)
                        
                        if not solved:
                            rows[row].remove(val)
                            cols[col].remove(val)
                            boxes[box_id].remove(val)
                            board[row][col] = "."
        
        solved = False
        backtrack(0, 0)
        
